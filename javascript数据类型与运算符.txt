如果一个变量是将来用来存放对象的，那么最好给他赋值为null，，这是符合语法规范的
未赋值的变量默认值是undefined


数据类型的转换指的是String Number 和boolean之间的相互转换，可以分别用他们的包装函数

1、将其他类型的数据转换为String
-a.使用对应数据类的toString()函数
-b.使用String()包装函数（底层也是通过调用toString方法）
  
String()函数可以将任何一种类型的数据转换成字符串
null和defined两种类型js引擎不提供toString()方法，所以只能通过包装函数String()进行


2、将其他类型的数据转换为Number
  -a使用Number包装函数
  -b使用parseInt()和parseFloat()方法
	Number()函数可以将任意类型的纯数字字符串转换为对应的Number数字，其他类型的字符串全部为NaN（Not a Number）
	        空格和空串转换成0
		
		将布尔类型的数据转换成1和0(这跟计算机里面的逻辑状态是相对应的，1是true0是false)
		
		null为0， undefined为NaN

	parseInt()和parseFloat()方法只是用来将以数字开头的字符串转换成数字的，他们可以提取字符串中有效的数字
	parseInt转换字符串是以有效的数字字符为开头的
(因为在服务器与客户端通信的过程中，数据的传输都是以字符串的形式，所以类型的转换是很有必要的)

3、将其他类型数据转换为Boolean
 -使用Boolean()包装函数进行类型的转换
	Number类型转换为Boolean，除了0和NaN，其他全部转换为true
	String类型转换为Boolean，除了空串儿，其他全部转换为true
	
	null和undefined转换为布尔类型全部是false

4、运算符：
非数字类型的数据进行四则运算(按照从左到右的顺序进行计算)：
所有由字符串参与的加法运算，结果一定是字符串
所有由非数字字符串参与的其他运算，结果都是NaN
所有数字字符串参与的其他运算都会转换成对应的数字进行计算
任何类型的数据与NaN参与运算结果都是NaN（除了字符串类型）
null转换成Number类型是0

5、逻辑运算

逻辑运算，与（&&）， 或（||）， 非（！）
逻辑运算要注意逻辑运算中的短路特性
与运算中找false
或运算中找true

int a = 0 , b=1, c = 2, f = 0;
if((f = b > c) && (f = c > a))
运算结果是f = 1 ;

if((f = c > a) || (f = b > a))
运算结果是f = 1 ；

(或短路)
true || alert("Hello");
false|| alert("World") ;
（与短路）
false && alert("Hello") ;
true && alert("World");

对于非布尔类型的数据进行逻辑运算，同样遵循短路特性，但是不会返回布尔值，而是返回原值(需要注意其他数据对应的布尔值)

6、关系运算符

说字符串之间进行比较，比较规则是他们对应的数字编码。
说非数字型字符串和其他类型数据比较全部是false
数字型字符串可以跟任何类型的数据比较大小，转换成对应的10进制数据
说undefined与任何类型的数据比较都返回false
说NaN与任何类型的数据进行关系运算都返回false


非数字类型的变量进行关系运算时都会转换成对应的数字编码进行比较

7、相等性的判断

NaN与任何类型的数据都不相等，包括本身
全等和全不等不会对数据进行类型转换，如果类型不一致，直接返回false

其他类型的数据之间的比较都会转换成对应的数字编码进行比较