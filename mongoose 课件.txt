#Mongoose
##简介
- Mongoose 是MongoDB的一个对象模型工具，是 nodejs 操作 MongoDB 的第三方框架，可以在异步的环境下执行。
- 同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。

		- 参考资料
			- 文档： www.mongoosejs.com
			- mongoose 的 API 是我见过的最好的文档，没有之一 
				- 虽然只有英文版，但是，光看例子也能够理解基本含义

##安装引用
- 安装mongoose：
		npm install mongoose
- 引用mongoose：
		var mongoose = require("mongoose");
- 使用"mongoose"连接数据库：
		var db = mongoose.connect("mongodb://user:pass@localhost:port/database");

## Mongoose 最重要（最难）的三个概念
1. Schema : 模式，规范
2. Model ： 模型，函数
3. Entity ： 实体，实例，对象

三者之间的关系
![三者关系示意图](./mongoose 设计思路示意图.jpg)


### Schema 简述
- 含义： Schema —— 一种以文件形式存储的数据库模型骨架，可以说是数据属性模型【传统意义的表结构】，又或着是“集合”的模型骨架。 Schema 无法直接连接数据库端，也就是说它不具备对数据库的操作能力，仅仅只是数据模型在程序片段中的一种表现。说白了就是规定了一种数据存储格式
- 代码定义		
		var mongoose = require("mongoose");
		var MonsterSchema = new mongoose.Schema({
		    name : { type:String },	//属性name,类型为String
		    age  : { type:Number, default:0 },	//属性age,类型为Number,默认为0
		    time : { type:Date, default:Date.now },
		    email: { type:String,default:''}
		});
		//基本属性类型有：字符串、日期型、数值型、布尔型(Boolean)、null、数组、内嵌文档等。

### Model 简述
- 含义： Model —— 由Schema构造生成的模型，它具有了Schema定义的数据库骨架（数据格式数据模型）。此外，更重要的是还具有数据库操作的行为，类似于管理数据库属性、行为的类。
- 创建一个 Model 模型，我们需要指定：
	1. 集合名称
	2. 集合的 Schema 结构对象
- 代码
		//通过Schema来创建Model呢，如下示例：		
		var db = mongoose.connect("mongodb://127.0.0.1:27017/test");
		// 创建Model
		var MonsterModel = db.model("Monster", MonsterSchema);
		// MonsterModel：数据库中的集合名称,当我们对其添加数据时如果 MonsterModel 已经存在，则会保存到其目录下，如果未存在，则会创建 MonsterModel 集合，然后在保存数据。

拥有了Model，我们也就拥有了操作数据库的法宝，在后面的课程中，我们就会学习使用Model来进行增删改查的具体操作
如果需要对某个集合有所作为，那就交给 Model 模型来处理。

### Entity 简述
- 含义 Entity —— 由 Model 创建的实体，Entity 指代某一条具体的文档，model 指代某个表（collection）。 Model 和 Entity 都能操作数据库，但 Model 比 Entity 具有更大的操作空间
- 代码
		// 使用Model创建Entity
		var monsterEntity = new MonsterModel({	
		       name : "niuMoWang",
		       age  : 2000,
		       email: "niuMoWang@atguigu.com"
		});
		//说白了，就是 new 了一个对象
		console.log(niuMoWang.name); 
		console.log(niuMoWang.age); 
		//创建成功之后，Schema 属性就变成了 Model 和 Entity 的公共属性了

##**增删改查**
###增
- Model 保存方法
	- 方法：Model.create(文档数据, callback))
	- 代码：
			MonsterModel.create({ name:"路人甲", age:2}, function(error, doc){
			    if(error) {
			        console.log(error);
			    } else {
			        console.log(doc);
			    }
			});
- Entity 保存方法
	- 方法：Entity.save(callback))
	- 代码：
			var entity = new MonsterModel({ name:"路人甲", age:2});
			entity.save(function(error,doc) {
			    if(error) {
			        console.log(error);
			    } else {
			        console.log(doc);
			    }
			});

###删
- Model 删除方法
	- 方法：model.remove(查询条件,callback);
	- 代码：
			var conditions = { name: '路人甲' };
			MonsterModel.remove(conditions, function(error){
			    if(error) {
			        console.log(error);
			    } else {
			        console.log('Delete success!');
			    }
			});
- Entity 删除方法
	- 方法：obj.remove(callback);
	- 代码：
			entity.remove(function(err, doc){
				if(err){
					console.error(err);
				} else {
					console.log(doc);
				}
			});
###改
- Model 更新方法
	- 方法：obj.update(查询条件, 更新对象, callback);
	- 代码：
			ar conditions = {name : '路人甲'};		
			var update = {$set : { age : 3 }};		
			MonsterModel.update(conditions, update, function(error){
			    if(error) {
			        console.log(error);
			    } else {
			        console.log('Update success!');
			    }
			});
- Entity 更新方法
	- 方法：obj.save(callback);
	- 代码：
			entity.age = 3;
			entity.save(function(err, doc){
				if(err){
					console.error(err);
				} else {
					console.log(doc);
				}
			});

###查
- **find查询**【最重要】
	- 方法： obj.find(查询条件, 过滤条件, callback);
	- 代码：
			MonsterModel.find({},function(error,docs){
			   //若没有向find传递参数，默认的是显示所有文档
			});		
			MonsterModel.find({ "age": 3 }, {_id:0}, function (error, docs) {
			  if(error){
			    console.log("error :" + error);
			  }else{
			    console.log(docs); //docs: age为28的所有文档
			  }
			}); 
	- 备注：
		- 查询条件有很多种，上面这段代码，代换不同的查询条件有不一样的效果
		- 过滤条件控制那些属性最终会包含在结果集当中，如果过滤条件省略或为Null，则返回所有属性。
- 单条数据查询
	- 方法： findOne(Conditions,callback);
	- 代码：
			MonsterModel.findOne({ age: 3}, function (err, doc){
			   // 查询符合age等于27的第一条数据
			   // doc是查询结果
			});
			// findOne方法，只返回第一个符合条件的文档数据。
	- 方法：findById(_id, callback);
	- 代码：
			MonsterModel.findById('obj._id', function (err, doc){
			 //doc 查询结果文档
			});   

####查询条件
"$lt"(小于)，"$lte"(小于等于),"$gt"(大于)，"$gte"(大于等于)，"$ne"(不等于)，"$in"(可单值和多个值的匹配)，"$or"(查询多个键值的任意给定值)，"$exists"(表示是否存在的意思)。
- 大于、小于、不等于
		MonsterModel.find({"age":{"$gt":18}},function(error,docs){
		   //查询所有nage大于18的数据
		});		
		MonsterModel.find({"age":{"$lt":60}},function(error,docs){
		   //查询所有nage小于60的数据
		});		
		MonsterModel.find({"age":{"$gt":18,"$lt":60}},function(error,docs){
		   //查询所有nage大于18小于60的数据
		});
		MonsterModel.find({ age:{ $ne:24}},function(error,docs){
		    //查询age不等于24的所有数据
		});		
		MonsterModel.find({name:{$ne:"路人甲"},age:{$gte:3}},function(error,docs){
		  //查询name不等于tom、age>=18的所有数据
		});

- 包含
		MonsterModel.find({ age:{ $in: 2}},function(error,docs){
		   //查询age等于20的所有数据
		});		
		MonsterModel.find({ age:{$in:[2,3]}},function(error,docs){
		  //可以把多个值组织成一个数组
		}); 

- 逻辑或	
		MonsterModel.find({"$or":[{"name":"yellowBrow"},{"age":500}]},function(error,docs){
		  //查询name为yaya或age为28的全部文档
		});

- 属性是否存在
		MonsterModel.find({name: {$exists: true}},function(error,docs){
		  //查询所有存在name属性的文档
		});
		MonsterModel.find({telephone: {$exists: false}},function(error,docs){
		  //查询所有不存在telephone属性的文档
		});

##游标
数据库使用游标返回 find 的执行结果。
客户端对游标的实现通常能够对最终结果进行有效的控制。可以限制结果的数量，略过部分结果，根据任意键按任意顺序的组合对结果进行各种排序。
最常用的查询选项就是限制返回结果的数量(limit函数)、忽略一点数量的结果(skip函数)以及排序(sort函数)。所有这些选项一点要在查询被发送到服务器之前指定。
###游标的三大函数
 sort函数 --------  skip函数  --------  limit函数
1. ** sort 函数  **
	- 介绍：sort函数可以将查询结果数据进行排序操作，该函数的参数是一个或多个键/值对，键代表要排序的键名，值代表排序的方向，1是升序，-1是降序。
	- 方法：find(Conditions,fields,options,callback);
	- 代码：
			Model.find({},null,{sort:{age:-1}},function(err,docs){
		  		//查询所有数据，并按照age降序顺序返回数据docs
			});

2. **  skip 函数  **
	- 介绍：跳过指定数量的匹配结果，返回余下的查询结果。
	- 方法：find(Conditions,fields,options,callback);
	- 代码;
			Model.find({},null,{skip:4},function(err,docs){
	    		console.log(docs);
			});
			// 如果查询结果数量中少于4个的话，则不会返回任何结果。

3. ** limit 函数 **
	- 介绍：在查询操作中，有时数据量会很大，这时我们就需要对返回结果的数量进行限制，那么我们就可以使用limit函数，通过它来限制结果数量。
	- 方法：find(Conditions,fields,options,callback);
	- 代码：
			Model.find({},null,{limit:20},function(err,docs){
    			console.log(docs);	
			});
			// 如果匹配的结果不到20个，则返回匹配数量的结果，也就是说limit函数指定的是上限而非下限。





